@* TicketCreate *@
@page "/tickets/create"
@attribute [Authorize]

@inject ITicketDTOService ticketService
@inject IProjectDTOService projectService
@inject IAppAuthorizationService AuthService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

<PageTitle>Submit New Ticket | Dev Tracker</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large">
	<MudBreadcrumbs Items="breadcrumbs" Class="breadcrumbs1" />
	<MudPaper Class="p-3">
		<AnimatedBlock Index="@Index.Next()">
			<MudText Typo="Typo.h3" GutterBottom>
				Submit a New Ticket
			</MudText>
		</AnimatedBlock>
		<EditForm Model="ticket"
				  class="vstack gap-3"
				  OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />

			<AnimatedBlock Index="@Index.Next()">
				<MudTextField @bind-Value="ticket.Title"
							  For="() => ticket.Title"
							  Label="Title"
							  Variant="Variant.Outlined"
							  Required="true" />
			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">
				<MudTextField @bind-Value="ticket.Description"
							  For="() => ticket.Description"
							  Label="Description"
							  Variant="Variant.Outlined"
							  Lines="5"
							  MaxLines="15"
							  AutoGrow="true"
							  Required="true" />

			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">
				<MudSelect T="int"
						   @bind-Value="ticket.ProjectId"
						   @bind-Value:after="HandleProjectChangeAsync"
						   For="() => ticket.ProjectId"
						   Label="Project"
						   Variant="Variant.Outlined"
						   Required="true"
						   RequiredError="Please select a valid project.">
					<MudSelectItem Value="@(0)">Select a project</MudSelectItem>
					@foreach (var p in projects)
					{
						<MudSelectItem Value="@(p.Id)">@p.Name</MudSelectItem>
					}
				</MudSelect>
				<ValidationMessage For="() => ticket.ProjectId" />

			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">
				<div class="hstack flex-wrap gap-3 align-items-start">
					<MudSelect Value="UserInfo!.UserId"
							   For="() => ticket.SubmitterUserId"
							   Label="Submitter"
							   Variant="Variant.Outlined"
							   Disabled>
						<MudSelectItem Value="UserInfo!.UserId">
							@UserInfo?.FullName
						</MudSelectItem>

					</MudSelect>
					<MudSelect @bind-Value="ticket.DeveloperUserId"
							   For="() => ticket.DeveloperUserId"
							   Label="Developer"
							   Variant="Variant.Outlined"
							   Disabled="BtnDisabled"
							   Placeholder="Select a developer">
						@foreach (AppUserDTO developer in developers)
						{
							<MudSelectItem Value="@developer.Id">
								@developer.FullName
							</MudSelectItem>
						}
					</MudSelect>
					<ValidationMessage For="() => ticket.DeveloperUserId" />
				</div>
			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">
				<MudField Label="Ticket Type"
						  Variant="Variant.Outlined">
					<PriorityChipSelector TEnum="TicketType"
										  Selected="ticket.Type"
										  SelectedChanged="val => ticket.Type = val" />
				</MudField>
				<ValidationMessage For="() => ticket.Type" />
			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">
				<MudField Label="Ticket Priority"
						  Variant="Variant.Outlined">
					<PriorityChipSelector TEnum="TicketPriority"
										  Selected="ticket.Priority"
										  SelectedChanged="val => ticket.Priority = val" />
				</MudField>
				<ValidationMessage For="() => ticket.Priority" />
			</AnimatedBlock>

			<AnimatedBlock Index="@Index.Next()">

				<div class="d-flex">
					<BackToBtn Href="/tickets/open" Text="Back to Tickets" />

					<SubmitBtn DisplayText="Submit"
							   ButtonType="ButtonType.Submit" />
				</div>
			</AnimatedBlock>
		</EditForm>
	</MudPaper>
</MudContainer>

@code {
	private TicketDTO ticket = new();
	IEnumerable<ProjectDTO> projects = [];
	IEnumerable<AppUserDTO> developers = [];
	bool _canUserAssignTicket = false;

	private readonly IndexTrackerHelper Index = new();
	private bool BtnDisabled => developers.Count() == 0 || _canUserAssignTicket == false;
	private string PlaceholderText => developers.Count() == 0 ? "No developers available" : "Select a developer";

	protected override void OnParametersSet() => Index.Reset();

	protected override async Task OnInitializedWithAuthAsync()
	{
		if (UserInfo is not null)
		{
			// Set the submitter to the current user
			ticket.SubmitterUserId = UserInfo.UserId;
			ticket.Created = DateTime.UtcNow;
			ticket.Status = TicketStatus.New;

			try
			{    //Get all active projects to display in form select
				projects = await projectService.GetAllProjectsAsync(UserInfo!);
			}
			catch (Exception ex)
			{

				Console.WriteLine(ex);
				Snackbar.Add("Unable to load projects. Please try again.", Severity.Error);
			}
		}
	}

	private async Task HandleProjectChangeAsync()
	{
		if (ticket.ProjectId == 0) //project not selected
		{
			ticket.DeveloperUserId = null;
			developers = [];
			return;
		}
		try
		{
			// Check if the user can assign tickets (is Admin or PM of the selected project)
			_canUserAssignTicket = await AuthService.IsUserAdminPMAsync(ticket.ProjectId, UserInfo!);

			if(!_canUserAssignTicket)
			{
				_canUserAssignTicket = false;
				ticket.DeveloperUserId = null;
			}

			
			IEnumerable<AppUserDTO> projectMembers = await projectService.GetProjectMembersAsync(ticket.ProjectId, UserInfo!);
			developers = projectMembers.Where(m => m.Role == Role.Developer);

			if (!developers.Any(d => d.Id == ticket.DeveloperUserId))
			{
				ticket.DeveloperUserId = null;
			}

		}
		catch (Exception ex)
		{

			Console.WriteLine(ex);
			Snackbar.Add("Failed to load developers for the selected project.", Severity.Warning);
		}
	}


	private static readonly List<BreadcrumbItem> breadcrumbs = new()
	{
	   new BreadcrumbItem("Home", href:"/" ),
	   new BreadcrumbItem("Tickets", href:"/tickets/open" ),
	   new BreadcrumbItem("Submit a New Ticket", href:null, disabled: true ),

	};

	private async Task HandleValidSubmit()
	{
		if (!_canUserAssignTicket)
		{
			ticket.DeveloperUserId = null;
		}

		try
		{
			var result = await ticketService.AddTicketAsync(ticket!, UserInfo!);
			ticket = result!;
			Snackbar.Add($"{ticket!.Title} created successfully!", Severity.Success);
		}
		catch (Exception ex)
		{
			// Handle error, e.g., show a message to the user
			Console.Error.WriteLine($"Error creating ticket: {ex.Message}");
			Snackbar.Add("Unable to create ticket. Please try again.", Severity.Error);
			return;
		}
		if (ticket.Id > 0)
		{
			

			// Navigate to the ticket list or details page after successful creation
			NavManager.NavigateTo($"tickets/{ticket.Id}");
		}

	}


}
