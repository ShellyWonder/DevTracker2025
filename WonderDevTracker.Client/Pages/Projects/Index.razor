@* Projects Index *@
@page "/projects"
@attribute [Authorize]
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

<PageTitle>Active Projects | Dev Tracker</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large" Class="py-4 page-container" Style="height: 100%; position: relative">
    <MudBreadcrumbs Items="breadcrumbs" Class="breadcrumbs1" />
    @if (!_loadingComplete)
    {
        <LoadingSpinner Message="Loading project details..." Color="Color.Primary" Size="Size.Large" />
    }

    <MudText Typo="Typo.h3" GutterBottom>All Projects </MudText>

    @if (projects.Count() > 0)
    {
        <div class=" row row-cols-1  row-cols-md-2 row-cols-xl-3 g-3">
            @* for more information see Helpers/Animation/AnimationHelper.cs *@
            @foreach (var item in animationHelper.GetProjectsWithIndex())
            {
                <div class="col mb-2">

                    <ProjectCard Project="@item.Project" Index="@item.Index" />
                </div>
            }

        </div>
        @*Floating Action Button*@
        <MudTooltip Text="Create New Project">
            <AuthorizeView Roles="@($"{nameof(Role.Admin)},{nameof(Role.ProjectManager)}")">
                <MudFab Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.Add"
                        Href="/projects/create"
                        Class="create-btn"
                        aria-label="Create New Project" />
            </AuthorizeView>
        </MudTooltip>
    }
    else
    {
        <NotFoundFull Message="No active projects found."
                      ReturnUrl="/"
                      ReturnLabel="Home"
                      ForwardUrl="/projects/create"
                      ForwardLabel="Create New Project" />
    }

</MudContainer>

@code {
    private IEnumerable<ProjectDTO> projects = [];
    private CardAnimationHelper animationHelper => new(projects);
    private bool _loadingComplete = false;

    protected override async Task OnInitializedWithAuthAsync()
    {
        try
        {
            projects = await ProjectService.GetAllProjectsAsync(UserInfo!);

        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading projects: {ex.Message}");
            Snackbar.Add("Error loading projects.", Severity.Error);
        }
        _loadingComplete = true;

    }


    private static readonly List<BreadcrumbItem> breadcrumbs = new()
        {
           new BreadcrumbItem("Home", href:"/" ),
           new BreadcrumbItem("All Projects", href:null, disabled: true ),

        };

}
