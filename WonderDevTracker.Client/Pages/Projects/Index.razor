@* Projects Index *@
@page "/projects"
@attribute [Authorize]
@inject IProjectDTOService ProjectService

@inherits AuthenticatedComponentBase

<PageTitle>Active Projects | Dev Tracker</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large" Class="py-4 page-container" Style="height: 100%; position: relative">
    <MudBreadcrumbs Items="breadcrumbs" Class="breadcrumbs1" />
    <MudText Typo="Typo.h3" GutterBottom>All Projects </MudText>

    @if (projects.Count() > 0)
    {
        <div class=" row row-cols-1  row-cols-md-2 row-cols-xl-3 g-3">
            @* for more information see Helpers/Animation/AnimationHelper.cs *@
            @foreach (var item in animationHelper.GetProjectsWithIndex())
            {
                <div class="col mb-2">

                    <ProjectCard Project="@item.Project" Index="@item.Index" />
                </div>
            }

        </div>
    }
    else
    {
        <div class="h-100 d-flex align-items-center justify-content-center">
            <MudText Typo="Typo.button" Color="Color.Secondary">
                No active projects found.
            </MudText>
        </div>
    }

    @*Floating Action Button*@
    <MudTooltip Text="Create New Project">
        <AuthorizeView Roles="@($"{nameof(Role.Admin)},{nameof(Role.ProjectManager)}")">
            <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Add"
                    Href="/projects/create"
                    Class="create-btn"
                    AriaLabel="Create New Project" />
        </AuthorizeView>
    </MudTooltip>


</MudContainer>

@code {
        private IEnumerable<ProjectDTO> projects = [];
        private CardAnimationHelper animationHelper => new(projects);

        private static readonly List<BreadcrumbItem> breadcrumbs = new()
        {
           new BreadcrumbItem("Home", href:"/" ),
           new BreadcrumbItem("Projects", href:null, disabled: true ),

        };

        protected override async Task OnInitializedWithAuthAsync()
        {
            projects = await ProjectService.GetAllProjectsAsync(UserInfo!);
        }
}
