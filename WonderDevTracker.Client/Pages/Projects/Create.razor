@* Project Create *@
@page "/projects/create"
@attribute [Authorize(Roles = $"{nameof(Role.Admin)}, {nameof(Role.ProjectManager)}")]

@inject IProjectDTOService ProjectService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

<PageTitle>Create Project | Dev Tracker</PageTitle>
<AnimatedBlock Index="@Index.Next()"></AnimatedBlock>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudBreadcrumbs Items="breadcrumbs" Class="breadcrumbs1" />

    <MudPaper Class="p-3">
        <AnimatedBlock Index="@Index.Next()">
            <MudText Typo="Typo.h3" GutterBottom>
                Create a New Project
            </MudText>
        </AnimatedBlock>
        <EditForm Model="project"
                  Class="vstack gap-3"
                  OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <AnimatedBlock Index="@Index.Next()">
                <MudTextField @bind-Value="project.Name"
                              For="() => project.Name"
                              Label="Name"
                              Variant="Variant.Outlined"
                              Required="true" />
            </AnimatedBlock>

            <AnimatedBlock Index="@Index.Next()">
                <MudTextField @bind-Value="project.Description"
                              For="() => project.Description"
                              Label="Description"
                              Variant="Variant.Outlined"
                              Lines="5"
                              MaxLines="15"
                              AutoGrow="true"
                              Required="true" />
            </AnimatedBlock>
            <AnimatedBlock Index="@Index.Next()">
                <div class="hstack gap-3 align-items-start flex-wrap">
                    <MudDatePicker @bind-Date="project.StartDateTime"
                                   For="@(() => project.StartDateTime)"
                                   Required="true"
                                   Label="Planned Start Date"
                                   Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => project.StartDateTime)" />


                    <MudDatePicker @bind-Date="project.EndDateTime"
                                   For="@(() => project.EndDateTime)"
                                   Required="true"
                                   Label="Planned End Date"
                                   Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => project.EndDateTime)" />
                </div>
            </AnimatedBlock>

            <AnimatedBlock Index="@Index.Next()">
                <MudField Label="Project Priority"
                          Variant="Variant.Outlined">

                    <PriorityChipSelector TEnum="ProjectPriority"
                                          @bind-Selected="project.Priority" />

                </MudField>
                <ValidationMessage For="() => project.Priority" />
            </AnimatedBlock>

            <AnimatedBlock Index="@Index.Next()">
                <ValidationSummary />
                <div class="d-flex">
                    <BackToBtn Href="/projects" Text="Back to Projects" />

                    <MudButton Color="Color.Primary"
                               Class="ms-auto mt-2"
                               Variant="Variant.Filled"
                               ButtonType="ButtonType.Submit"
                               StartIcon="@Icons.Material.Filled.Save">
                        Submit
                    </MudButton>
                </div>
            </AnimatedBlock>
        </EditForm>
    </MudPaper>

</MudContainer>

@code {
    private ProjectDTO project = new() { Created = DateTimeOffset.UtcNow };
    private readonly IndexTrackerHelper Index = new();

    protected override void OnParametersSet() => Index.Reset();


    private static readonly List<BreadcrumbItem> breadcrumbs = new()
    {
       new BreadcrumbItem("Home", href:"/" ),
       new BreadcrumbItem("Projects", href:"/projects" ),
       new BreadcrumbItem("Create a New Project", href:null, disabled: true ),

    };
    private async Task HandleValidSubmit()
    {
        try
        {
            project = await ProjectService.CreateProjectAsync(project, UserInfo!);
            Snackbar.Add($"{project.Name} created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            // Handle error, e.g., show a message to the user
            Console.Error.WriteLine($"Error creating project: {ex.Message}");
            Snackbar.Add("Unable to create project. Please try again.", Severity.Error);
            return;
        }
        NavManager.NavigateTo("/projects/{ProjectId}");
    }
}
