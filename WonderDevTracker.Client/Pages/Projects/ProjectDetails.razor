@* ProjectDetails *@
@page "/projects/{ProjectId:int}"
@attribute [Authorize]

@inject IProjectDTOService ProjectService
@inject IndexTrackerHelper IndexTracker
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

<MudContainer MaxWidth="MaxWidth.Large" Class="py-4 page-container" Style="height: 100%; position: relative">
    <MudBreadcrumbs Items="breadcrumbs" Class="breadcrumbs1" />
    @if (!_loadingComplete)
    {
        <LoadingSpinner Message="Loading project details..." Color="Color.Primary" Size="Size.Large" />
    }
    else if (project is not null)
    {
        @* Reset Index at start of render;
            controls the index for components that use IndexTracker.*@
        ResetIndex();
        <PageTitle>@project?.Name Details | Dev Tracker</PageTitle>

        @* <MudPaper Class="p-3"> *@
            <div class="vstack gap-3">
                @* Test:

                <MudText Typo="Typo.caption">Rendering with Index = @IndexTracker.Peek()</MudText> *@

                <ProjectGeneralInfo Project="project" 
                                    Index="@IndexTracker.Next()"
                                OnEditResult="HandleEditResult" />
                <ProjectDescription Project="project" Index="@IndexTracker.Next()" />
                <ProjectMembers Project="project" Index="@IndexTracker.Next()" />
                <ProjectTickets Project="project" Index="@IndexTracker.Next()" />

            </div>
        @* </MudPaper> *@
        <BackToBtn Href="/projects" Text="Back to Projects" Disabled="@(project is null)" />
    }
    else
    {
        <PageTitle>Project Not Found | Dev Tracker</PageTitle>

        <NotFoundFull Message="Project not found"
                      ReturnUrl="/projects"
                      ReturnLabel="Back to Projects"
                      ForwardUrl="/projects/create"
                      ForwardLabel="Create New Project" />

    }

</MudContainer>

@code {
    [Parameter]
    public int ProjectId { get; set; }
    private ProjectDTO? project;

    private List<BreadcrumbItem> breadcrumbs = [];
    private bool _loadingComplete = false;

    private void ResetIndex() => IndexTracker.Reset();

    protected override async Task OnInitializedWithAuthAsync()
    {
        try
        {
            project = await ProjectService.GetProjectByIdAsync(ProjectId, UserInfo!);

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            Snackbar.Add("Error loading project details.", Severity.Error);
        }
        _loadingComplete = true;


        breadcrumbs = new()
            {
                new BreadcrumbItem("Home", href: "/"),
                new BreadcrumbItem("Projects", href: "/projects"),
                new BreadcrumbItem(project?.Name ?? "Project Not Found", href: null, disabled: true)

            };

    }
    private void HandleEditResult((string Message, Severity Severity) result)
    {
        Snackbar.Add(result.Message, result.Severity);
    }
}
