@*ProjectMembers *@
@using WonderDevTracker.Client.Components.UIComponents.ProjectComponents.Dialogs
@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase


@if (Project is not null)
{

    <div class="vstack gap-3">
        <AnimatedCard Index="Index">
            <MudCardHeader>
                <MudText Typo="Typo.h3" Color="Color.Primary">Project Members</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (Project.Members?.Count == 0)
                {
                    <NotFoundDisplay Message="No assigned project members" />
                }
                else
                {

                    <MudText Typo="Typo.h5" GutterBottom>Project Developers</MudText>
                    <MudChipSet @bind-SelectedValues="selectedDeveloperIds"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (AppUserDTO developer in _developers)
                        {

                            <MembersByRoleChip User="developer"
                                               Value="@developer.Id"
                                               SelectedColor="Color.Primary"
                                               DisplayText="@developer.FullName" />
                        }
                    </MudChipSet>

                    <MudText Typo="Typo.h5" GutterBottom>Project Submitters</MudText>

                    <MudChipSet @bind-SelectedValues="selectedSubmitterIds"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (AppUserDTO submitter in _submitters)
                        {

                            <MembersByRoleChip User="submitter"
                                               Value="@submitter.Id"
                                               SelectedColor="Color.Primary"
                                               DisplayText="@submitter.FullName"
                                               Color="@Color.Secondary" />
                        }
                    </MudChipSet>

                }

                <AuthorizeView Roles="@($"{Role.Admin}, {Role.ProjectManager}")">
                    <SafeNavButton Valid="true"
                                   Color="Color.Tertiary"
                                   Variant="Variant.Text"
                                   Class="project-details-link"
                                   StartIcon="@Icons.Material.Filled.Group"
                                   OnClick="()=>IsMemberDialogOpen = true"
                                   TypeText="Manage Team" />
                </AuthorizeView>
            </MudCardContent>
        </AnimatedCard>
    </div>

    <MudDialog @bind-Visible="IsMemberDialogOpen">
        <TitleContent>
            <MudText Typo="Typo.h3" Color="Color.Primary">Manage Project Team</MudText>
        </TitleContent>
        <DialogContent>
            <ManageProjectTeam Project="Project" OnClose="() => IsMemberDialogOpen = false" />
        </DialogContent>
    </MudDialog>
}



@code {
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [Parameter, EditorRequired]
    public int Index { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    //state holders
    private IEnumerable<AppUserDTO> _developers = [];
    private IEnumerable<AppUserDTO> _submitters = [];
    // private AppUserDTO? _projectManager;
    private bool IsMemberDialogOpen = false;

    //selected members -- bind to chip sets(IReadOnlyCollection is only option for chip sets))
    private IReadOnlyCollection<string> selectedDeveloperIds = [];
    private IReadOnlyCollection<string> selectedSubmitterIds = [];

    //existing members
    private IEnumerable<string> ExistingMemberIds = [];

    protected override async Task OnParametersSetAsync()
    {
        if (Project is null) return;

        //Get existing project members
        ExistingMemberIds = Project.Members?.Select(m => m.Id) ?? [];
        try
        {
            //Get all available users in roles
            // _projectManager = await CompanyService.GetProjectManagerAsync(Project.Id);
            _developers = await CompanyService.GetUsersInRoleAsync(Role.Developer, UserInfo!);
            _submitters = await CompanyService.GetUsersInRoleAsync(Role.Submitter, UserInfo!);

            // Pre-select existing members in the chip sets
            selectedDeveloperIds = [.. _developers.Select(d => d.Id).Where(id => ExistingMemberIds.Contains(id))];
            selectedSubmitterIds = [.. _submitters.Select(s => s.Id).Where(id => ExistingMemberIds.Contains(id))];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Error loading project members.");
        }
    }



}


