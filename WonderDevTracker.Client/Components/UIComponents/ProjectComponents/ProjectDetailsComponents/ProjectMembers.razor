@*ProjectMembers *@
@inject ICompanyDTOService CompanyService
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

<AuthorizeView Roles="@($"{Role.Admin}, {Role.ProjectManager}")">

    <AnimatedCard Index="Index">
        <MudCardHeader>
            <MudText Typo="Typo.h5" Color="Color.Primary">Project Members</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (Project.Members?.Count == 0)
            {
                <NotFoundDisplay Message="No assigned project members" />
            }
            else
            {
               <div>Members go here</div>
            }

            <SafeNavButton Valid="true"
                           Color="Color.Tertiary"
                           Variant="Variant.Text"
                           Class="project-details-link ms-auto"
                           StartIcon="@Icons.Material.Filled.Group" 
                           OnClick="()=>IsMemberDialogOpen = true"
                           TypeText="Manage Team"   />
                
        </MudCardContent>
    </AnimatedCard>
    <MudDialog @bind-Visible="IsMemberDialogOpen">
        <TitleContent>
            <MudText Typo="Typo.h5">Manage Project Team</MudText>
        </TitleContent>
            <DialogContent>
            <div class="vstack gap-3">
                <div>
                    <MudText Typo="Typo.h6">Project Manager</MudText>
                </div>
                <div>
                    <MudText Typo="Typo.h6" GutterBottom>Project Developers</MudText>
                    <MudChipSet @bind-SelectedValues="selectedDeveloperIds"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (AppUserDTO developer in _developers)
                        {
                            <MembersByRoleChip User="developer"
                                               Value="@developer.Id"
                                               SelectedColor="Color.Primary"
                                               DisplayText="@developer.FullName" />
                        }
                    </MudChipSet>
                </div>

                <div>
                    <MudText Typo="Typo.h6">Project Submitters</MudText>
                    <MudChipSet @bind-SelectedValues="selectedSubmitterIds"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (AppUserDTO submitter in _submitters)
                        {
                            <MembersByRoleChip User="submitter"
                                               Value="@submitter.Id"
                                               SelectedColor="Color.Primary"
                                               DisplayText="@submitter.FullName"
                                               Color="@Color.Secondary" />
                        }
                    </MudChipSet>
                </div>
                <div class="text-end">
                    <CancelBtn ButtonType="ButtonType.Button"
                               DisplayText="Cancel"
                               OnClick="HandleCancel" />

                    <SubmitBtn ButtonType="ButtonType.Submit"
                               DisplayText="Submit" />
                </div>
            </div>
            </DialogContent>
    </MudDialog>
</AuthorizeView>

@code {
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [Parameter, EditorRequired]
    public int Index { get; set; }

    //state holders
    private IEnumerable<AppUserDTO> _developers = [];
    private IEnumerable<AppUserDTO> _submitters = [];
    private AppUserDTO? _projectManager;
    private bool IsMemberDialogOpen = false;

    //selected members -- bind to chip sets(IReadOnlyCollection is only option for chip sets))
    private IReadOnlyCollection<string> selectedDeveloperIds = [];
    private IReadOnlyCollection<string> selectedSubmitterIds = [];

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //load project members

            // _projectManager = await CompanyService.GetProjectManagerAsync(Project.Id);
            _developers = await CompanyService.GetUsersInRoleAsync(Role.Developer, UserInfo!);
            _submitters = await CompanyService.GetUsersInRoleAsync(Role.Submitter, UserInfo!);

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            Snackbar.Add("Error loading project members.", Severity.Error);
        }

    }

    private void HandleCancel()
    {
        selectedDeveloperIds = [];
        selectedSubmitterIds = [];
    }

}


