@* ManageProjectTeam *@
@inject ICompanyDTOService CompanyService
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar

@inherits AuthenticatedComponentBase

 <AuthorizeView Roles="@($"{Role.Admin}, {Role.ProjectManager}")">

<div class="vstack gap-3">
    <div>
        <MudText Typo="Typo.h6">Project Manager</MudText>
    </div>
    <div>
        <MudText Typo="Typo.h6" Color="Color.Dark" GutterBottom>Project Developers</MudText>

        <MudChipSet @bind-SelectedValues="selectedDeveloperIds"
                    SelectionMode="SelectionMode.MultiSelection">

            @foreach (AppUserDTO developer in _developers)
            {
                <MembersByRoleChip User="developer"
                                   Value="@developer.Id"
                                   SelectedColor="Color.Primary"
                                   DisplayText="@developer.FullName" />
            }
        </MudChipSet>
    </div>

    <div>
        <MudText Typo="Typo.h6">Project Submitters</MudText>

        <MudChipSet @bind-SelectedValues="selectedSubmitterIds"
                    SelectionMode="SelectionMode.MultiSelection">

            @foreach (AppUserDTO submitter in _submitters)
            {
                <MembersByRoleChip User="submitter"
                                   Value="@submitter.Id"
                                   SelectedColor="Color.Primary"
                                   DisplayText="@submitter.FullName"
                                   Color="@Color.Secondary" />
            }
        </MudChipSet>
    </div>

    <div class="text-end">
        <CancelBtn ButtonType="ButtonType.Button"
                   DisplayText="Cancel"
                   OnClick="HandleCancel" />

        <SubmitBtn ButtonType="ButtonType.Submit"
                   DisplayText="Submit" 
                   OnClick="HandleSaveAsync"/>
    </div>
</div>
    </AuthorizeView>

@code {

    [Parameter]
    public ProjectDTO? Project { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }


    //team members state holders
    private IEnumerable<AppUserDTO> _developers = [];
    private IEnumerable<AppUserDTO> _submitters = [];
    private IEnumerable<string> ExistingMemberIds = [];
    // private AppUserDTO? _projectManager;

    //selected members -- bind to chip sets (IReadOnlyCollection is only option for chip sets)
    private IReadOnlyCollection<string> selectedDeveloperIds = [];
    private IReadOnlyCollection<string> selectedSubmitterIds = [];

    protected override async Task OnParametersSetAsync()
    {
        if (Project is null) return;

        //Get existing project members
        ExistingMemberIds = Project.Members?.Select(m => m.Id) ?? [];
        try
        {
            //Get all available users in roles
            // _projectManager = await CompanyService.GetProjectManagerAsync(Project.Id);
            _developers = await CompanyService.GetUsersInRoleAsync(Role.Developer, UserInfo!);
            _submitters = await CompanyService.GetUsersInRoleAsync(Role.Submitter, UserInfo!);

            //Pre-select existing members in the chip sets
            selectedDeveloperIds = [.. _developers.Select(d => d.Id).Where(id => ExistingMemberIds.Contains(id))];
            selectedSubmitterIds = [.. _submitters.Select(s => s.Id).Where(id => ExistingMemberIds.Contains(id))];
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Error loading project members.");
        }
    }
    
    private async Task HandleSaveAsync()
    {
        if (Project is null || UserInfo is null) return;

        try
        {
            IEnumerable<string> selectedUserIds = [.. selectedDeveloperIds, .. selectedSubmitterIds];
            foreach (var userId in selectedUserIds)
            {
                await ProjectService.AddProjectMemberAsync(Project.Id, userId, UserInfo);
            }
            Snackbar.Add("Project team updated successfully", Severity.Success);
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            Snackbar.Add("Failed to save changes", Severity.Error);
        }
    }


    private async Task HandleCancel()
    {
        //reset to initial state
        selectedDeveloperIds = [.. _developers.Select(d => d.Id).Where(id => ExistingMemberIds.Contains(id))];
        selectedSubmitterIds = [.. _submitters.Select(s => s.Id).Where(id => ExistingMemberIds.Contains(id))];
        await OnClose.InvokeAsync();
    }


}
