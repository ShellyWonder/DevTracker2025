@* TicketCommentArea *@
@attribute [Authorize]


@inherits AuthenticatedComponentBase

<AnimatedCard Index="Index">
	<MudPaper>
		<MudCardHeader>
			<MudText Typo="Typo.h3" Color="Color.Primary">@((MarkupString)Title)</MudText>
		</MudCardHeader>
		<MudDivider DividerType="DividerType.FullWidth" Light />
		<div class="d-flex flex-column-reverse comment-display p-3">

			@foreach (TicketCommentDTO comment in (Comments ?? Enumerable.Empty<TicketCommentDTO>())
						                           .OrderByDescending(c => c.Created))
			{
				<CommentDisplay Comment="comment" />
			}
		</div>
		@if (CanComment)
		{
			<MudDivider DividerType="DividerType.FullWidth" Light />
			<EditForm Model="newComment"
					  OnValidSubmit="@HandleSubmit"
					  class="p-3 d-flex gap-2 align-items-end">
				<DataAnnotationsValidator />
				<MudTextField T="string"
							  Lines="3"
							  AutoGrow
							  Variant="Variant.Outlined"
							  Class="flex-grow-1"
							  Label="Add a comment"
							  @bind-Value="newComment.Content"
							  For="()=> newComment.Content" />

				<SubmitBtn DisplayText="Send"
						   ButtonType="ButtonType.Submit"
						   StartIcon="@Icons.Material.Filled.Send"
						   Color="Color.Primary" />
			</EditForm>

		}
	</MudPaper>
</AnimatedCard>


@code {

	[Parameter, EditorRequired]
	public IEnumerable<TicketCommentDTO>? Comments { get; set; } = new List<TicketCommentDTO>();

	[Parameter]
	public string Title { get; set; } = "Ticket Comments";

	[Parameter, EditorRequired]
	public int Index { get; set; }

	[Parameter, EditorRequired]
	public bool CanComment { get; set; } = false;

	[Parameter, EditorRequired]
	public EventCallback<TicketCommentDTO> OnAdd { get; set; }

	TicketCommentDTO newComment = new();

	protected override async Task OnParametersSetAsync()
	{
		if (UserInfo is null)
		{
			CanComment = false;
			return;
		}

		newComment = new TicketCommentDTO()
		{
			UserId = UserInfo.UserId
		};
	}

	private async Task HandleSubmit()
	{
		if (CanComment)
		{
			await OnAdd.InvokeAsync(newComment);
			newComment = new() { UserId = UserInfo!.UserId };
		}
	}
}
