@* TicketsTable *@

<MudDataGrid Items="Tickets"
			 Elevation="2"
			 Dense="true"
			 ColumnResizeMode="ResizeMode.Container"
			 DragDropColumnReordering
			 Hideable
			 ShowMenuIcon
			 QuickFilter="TicketFilter"
			 RowsPerPage="10">
	<ToolBarContent>
		<MudTextField Variant="Variant.Text"
					  Placeholder="Search Tickets . . ."
					  AdornmentIcon="@Icons.Material.Filled.Search"
					  Adornment="Adornment.Start"
					  @bind-Value="searchText"
					  Immediate ="true"
					  Clearable = "true"   />
		<MudSpacer />
		<SafeNavButton Href="#" Valid="true"
					   Color="Color.Tertiary"
					   Variant="Variant.Text"
					   Class="project-details-link me-auto"
					   StartIcon="@Icons.Material.Filled.List"
					   TypeText="Add Ticket" />
	</ToolBarContent>
	<Columns>
		<PropertyColumn Property="t => t.Title">
			<CellTemplate>
				<TicketTitleLink Ticket="context.Item" />
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="t => GetProjectName(t)" Title="Project" />
		<PropertyColumn Property="t => t.Type">
			<CellTemplate>
				<TicketTypeChip Type="context.Item.Type" />
			</CellTemplate>
		</PropertyColumn>
		<TemplateColumn Title="Priority" Sortable="true" SortBy="t => t.Priority">
			<CellTemplate>
				<TicketPriorityChip Priority="context.Item.Priority" />
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Property="t => t.Status">
			<CellTemplate>
				<TicketStatusChip Status="context.Item.Status" />
			</CellTemplate>
		</PropertyColumn>
		<TemplateColumn Title="Submitter"
						Sortable="true"
						SortBy="c => c.SubmitterUser?.FullName"
						ShowColumnOptions="true">
			<CellTemplate>
				<AssignedToTicket User="context.Item.SubmitterUser" />
			</CellTemplate>
		</TemplateColumn>

		<TemplateColumn Title="Developer"
						Sortable="true"
						SortBy="c => c.DeveloperUser?.FullName"
						ShowColumnOptions="true">
			<CellTemplate>
				<AssignedToTicket User="context.Item.DeveloperUser" />
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Property="t => t.Modified" Title="Updated" Format="g">
			<CellTemplate>
				<MudText Typo="Typo.caption">
					@context.Item.Modified.ToLocalTime().ToString("g")
				</MudText>
			</CellTemplate>
		</PropertyColumn>

	</Columns>
	<PagerContent>
		<MudDataGridPager />
	</PagerContent>
	<NoRecordsContent>
		<NotFoundDisplay Message="No tickets available" />
	</NoRecordsContent>
</MudDataGrid>



@code {
	[Parameter, EditorRequired]
	public IEnumerable<TicketDTO> Tickets { get; set; } = [];

	private static string GetProjectName(TicketDTO ticket)
	=> ticket.Project?.Name ?? "Unknown";

	private string searchText = string.Empty;

	private bool TicketFilter(TicketDTO ticket)
	{
		if (string.IsNullOrWhiteSpace(searchText)
		   || ticket.Title!.Contains(searchText, StringComparison.CurrentCultureIgnoreCase)
		   || ticket.Project?.Name!.Contains(searchText, StringComparison.CurrentCultureIgnoreCase) == true
		   || (ticket.SubmitterUser?.FullName ?? "Unknown").Contains(searchText, StringComparison.CurrentCultureIgnoreCase) == true
		   || (ticket.DeveloperUser?.FullName ?? "Unassigned").Contains(searchText, StringComparison.CurrentCultureIgnoreCase) == true
		   || ticket.Priority!.GetDisplayName().Contains(searchText, StringComparison.CurrentCultureIgnoreCase)
		   || ticket.Status!.GetDisplayName().Contains(searchText, StringComparison.CurrentCultureIgnoreCase)
		   || ticket.Type!.GetDisplayName().Contains(searchText, StringComparison.CurrentCultureIgnoreCase))

		{
			return true;
		}
		   return false;

	}

}
