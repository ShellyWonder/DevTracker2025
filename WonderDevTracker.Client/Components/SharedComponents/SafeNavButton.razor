@* SafeNavButton.razor *@

@* Note: This component is used to safely render a button or fallback text based on the validity of the Href parameter.
    Renders a MudButton if Valid is true; otherwise, shows fallback text 
    Protects against a runtime exception during server pre-render *@

@*IMPLEMENTATION EXAMPLE
    Automatically disabled if data is not available:
       <SafeNavButton Href="@($"/projects/{Project?.Id}")"
               Valid="@(Project?.Id is not null)">
    Details
</SafeNavButton>
Explicitly disabled (e.g. based on user role):
<SafeNavButton Href="@($"/admin")"
               Disabled="!UserIsAdmin">
    Admin Panel
</SafeNavButton> *@

<MudButton Variant="@Variant"
           Href="@FinalHref"
           Disabled="@FinalDisabled"
           Color="@Color"
           Class="@Class"
           Size="@Size"
           StartIcon="@StartIcon"
           EndIcon="@EndIcon"
           OnClick="@OnClick"
           ButtonType="ButtonType.Button">
    @if (ChildContent is not null)
    {
        @ChildContent
    }
    else
    {
        @TypeText
    }
</MudButton>

@code {
    [Parameter] public string? Href { get; set; }
    [Parameter] public bool Valid { get; set; } = true;
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public string? TypeText { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public Variant Variant { get; set; } = Variant.Filled;
    [Parameter] public Color Color { get; set; } = Color.Primary;
    [Parameter] public string? Class { get; set; }
    [Parameter] public Size Size { get; set; }
    [Parameter] public string? StartIcon { get; set; }
    [Parameter] public string? EndIcon { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    // Enable if: Valid && !Disabled && (Href provided OR OnClick provided)
    private bool ActionProvided => !string.IsNullOrWhiteSpace(Href) || OnClick.HasDelegate;

    private bool FinalDisabled => !Valid || Disabled || !ActionProvided;

    // Only emit Href when enabled & present; otherwise null to avoid accidental nav
    private string? FinalHref => FinalDisabled ? null : (string.IsNullOrWhiteSpace(Href) ? null : Href);
}

