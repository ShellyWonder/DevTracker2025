@*CommentDisplay*@
@inject IDialogService DialogService

@inherits AuthenticatedComponentBase

@if (Comment is not null)
{
	<EditForm Model="formComment"
			  OnValidSubmit="HandleSubmit"
			  class="@RowDirection">
		<DataAnnotationsValidator />

		<MudAvatar>
			<MudImage Src="@Comment.User?.ImageUrl" />
		</MudAvatar>
		<div class="@EditStatus">
			<MudPaper Class="px-3 py-2">
				<MudText Typo="Typo.overline"
						 Color="Color.Primary"
						 Style="line-height: 1em"
						 GutterBottom>
					@Comment.User?.FullName
				</MudText>
				@if (editing == false)
				{

					<MudText Typo="Typo.body1">@Comment.Content</MudText>
				}
				else
				{
					<MudTextField @bind-Value="formComment.Content"
								  For="() => formComment.Content"
								  Variant="Variant.Outlined"
								  Label="Comment"
								  Lines="6"
								  AutoGrow />
				}
			</MudPaper>
			<div class="@DateAlignment">
				<MudText Typo="Typo.caption"
						 Color="Color.Default"
						 Class="ps-3 text-secondary">
					@Comment.Created.ToLocalTime().ToString("g")
				</MudText>
			</div>
		</div>
		<div class="vstack gap-1 flex-grow-0">
			@if (editing == false)
			{
				@if (CanModifyComment(Comment))
				{
					<MudIconButton Icon="@Icons.Material.Filled.Edit"
								   Size="Size.Small"
								   OnClick="() => editing = true" />
				}
				@if (CanDeleteComment(Comment))
				{
					<MudIconButton Icon="@Icons.Material.Filled.Delete"
								   Size="Size.Small" 
								   OnClick="HandleDelete"/>

				}
			}
			else
			{
				<MudIconButton Icon="@Icons.Material.Filled.Save"
							   Color="Color.Success"
							   Size="Size.Small"
							   ButtonType="ButtonType.Submit" />

				<MudIconButton Icon="@Icons.Material.Filled.Cancel"
							   Color="Color.Error"
							   Size="Size.Small"
							   OnClick="CancelEdit" />
			}

		</div>
	</EditForm>
}
else
{
	<p>No comment to display.</p>
}


@code {
	[Parameter, EditorRequired]
	public TicketCommentDTO Comment { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<TicketCommentDTO> OnEdit { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> OnDelete { get; set; }

	private TicketCommentDTO formComment = new();
	private string RowDirection => CanModifyComment(Comment) ? "d-flex gap-2 py-2 align-items-start flex-row-reverse"
																			: "d-flex gap-2 py-2 align-items-start flex-row";
	private string DateAlignment => CanModifyComment(Comment) ? "text-end" : "text-start";
	
	private bool editing = false;
	private string EditStatus => editing ? "flex-grow-1" : string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (Comment is null) return;

		formComment = new TicketCommentDTO()
		{
			Id = Comment.Id,
			Content = Comment.Content,
			TicketId = Comment.TicketId,
			Created = Comment.Created,
			UserId = Comment.UserId

		};
	}
	private void CancelEdit()
	{
		if (Comment is not null) formComment.Content = Comment.Content;
		editing = false;
	}

	private async Task HandleSubmit()
	{
		await OnEdit.InvokeAsync(formComment);
		editing = false;
	}

	private async Task HandleDelete()
	{
		bool? confirmed = await DialogService.ShowMessageBox(
		title: "Delete Comment",
		message: "Are you sure you want to delete this comment?",
		yesText: "Delete",
		noText: "Cancel"
		);
		if (confirmed == true)
		{
			await OnDelete.InvokeAsync(Comment.Id);
		}
	}
}
